name: Release

on:
  push:
    tags:
      - 'v*'
  repository_dispatch:
    types: [trigger-release]
  workflow_dispatch:

jobs:
    
  build-macos:
    runs-on: macos-latest-large
    strategy:
      matrix:
        arch: [arm64, x64]
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 克隆私有仓库
        run: |
          git clone https://x-access-token:${{ secrets.PRIVATE_TOKEN }}@github.com/voideditor-dev/ide.git
          chmod -R 777 ide

      - name: 安装 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.18.3

      - name: 安装依赖
        run: |
          cd ide
          npm config set fetch-timeout 300000
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm install
          npm install -g node-gyp gulp-cli create-dmg

      - name: 构建应用
        run: |
          cd ide
          sudo npm run buildreact
          sudo npm run gulp vscode-darwin-${{ matrix.arch }}-min

      - name: 配置工作目录
        run: |
          WORKING_DIR="${{ runner.temp }}/PubinfoSign-${{ matrix.arch }}"
          KEYCHAIN_DIR="${WORKING_DIR}/1_Keychain"
          SIGN_DIR="${WORKING_DIR}/2_Signed"
          mkdir -p "${WORKING_DIR}" "${KEYCHAIN_DIR}" "${SIGN_DIR}"
          cp -Rp "$GITHUB_WORKSPACE/VSCode-darwin-${{ matrix.arch }}" "${SIGN_DIR}"
          echo "WORKING_DIR=${WORKING_DIR}" >> $GITHUB_ENV
          echo "KEYCHAIN_DIR=${KEYCHAIN_DIR}" >> $GITHUB_ENV
          echo "SIGN_DIR=${SIGN_DIR}" >> $GITHUB_ENV
          echo "SIGNED_DOTAPP_DIR=${SIGN_DIR}/VSCode-darwin-${{ matrix.arch }}" >> $GITHUB_ENV
          echo "SIGNED_DOTAPP=${SIGN_DIR}/VSCode-darwin-${{ matrix.arch }}/Pubinfo - IDE.app" >> $GITHUB_ENV

      - name: 导入证书
        env:
          P12_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          KEYCHAIN_PASSWORD: "temporary-password"
        run: |
          KEYCHAIN="${KEYCHAIN_DIR}/buildagent.keychain"
          echo "KEYCHAIN=${KEYCHAIN}" >> $GITHUB_ENV
          security create-keychain -p "${KEYCHAIN_PASSWORD}" "${KEYCHAIN}"
          security set-keychain-settings -lut 21600 "${KEYCHAIN}"
          security unlock-keychain -p "${KEYCHAIN_PASSWORD}" "${KEYCHAIN}"
          echo "${P12_BASE64}" | base64 --decode > "${KEYCHAIN_DIR}/certificate.p12"
          security import "${KEYCHAIN_DIR}/certificate.p12" -k "${KEYCHAIN}" -P "${P12_PASSWORD}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${KEYCHAIN_PASSWORD}" "${KEYCHAIN}" > /dev/null
          security list-keychains -d user -s "${KEYCHAIN}" $(security list-keychains -d user | sed s/\"//g)

      - name: 签名应用
        env:
          CODESIGN_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
          VSCODE_ARCH: ${{ matrix.arch }}
        run: |
          export AGENT_TEMPDIRECTORY="${KEYCHAIN_DIR}"
          cd $(pwd)/ide/build/darwin
          node sign.js "${SIGN_DIR}"
          codesign --verify --deep --strict --verbose=4 "${SIGNED_DOTAPP}"
          spctl --assess --type execute --verbose=4 "${SIGNED_DOTAPP}" || echo "✅ 尚未公证，跳过 spctl 错误"

      - name: 创建 DMG 镜像
        run: |
          cd "${SIGNED_DOTAPP_DIR}"
          npx create-dmg --volname "Pubinfo IDE Installer" "${SIGNED_DOTAPP}" . || true
          GENERATED_DMG=$(ls *.dmg)
          mv "${GENERATED_DMG}" "Pubinfo-Installer-darwin-${{ matrix.arch }}.dmg"
          codesign --verify --verbose=4 "Pubinfo-Installer-darwin-${{ matrix.arch }}.dmg"
          echo "SIGNED_DMG=${SIGNED_DOTAPP_DIR}/Pubinfo-Installer-darwin-${{ matrix.arch }}.dmg" >> $GITHUB_ENV

      - name: 公证应用
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APP_PASSWORD: ${{ secrets.APPLE_APP_PWD }}
          KEYCHAIN_PASSWORD: "temporary-password"
        run: |
          xcrun notarytool store-credentials "Pubinfo" \
            --apple-id "${APPLE_ID}" \
            --team-id "${TEAM_ID}" \
            --password "${APP_PASSWORD}" \
            --keychain "${KEYCHAIN}"

          echo "📦 提交公证中..."
          xcrun notarytool submit "${SIGNED_DMG}" \
            --keychain-profile "Pubinfo" \
            --keychain "${KEYCHAIN}" \
            --wait --timeout 2h

          echo "📎 附加票证中..."
          xcrun stapler staple "${SIGNED_DMG}" || echo "⚠️ 附加失败 — 可能被拒绝"

      - name: 创建 ZIP 应用存档
        run: |
          cd "${SIGNED_DOTAPP_DIR}"
          PUBINFOAPP=$(basename "${SIGNED_DOTAPP}")
          ditto -c -k --sequesterRsrc --keepParent "${PUBINFOAPP}" "Pubinfo-RawApp-darwin-${{ matrix.arch }}.zip"

      - name: 生成哈希文件
        run: |
          cd "${SIGNED_DOTAPP_DIR}"
          SHA1=$(shasum -a 1 "Pubinfo-RawApp-darwin-${{ matrix.arch }}.zip" | cut -d' ' -f1)
          SHA256=$(shasum -a 256 "Pubinfo-RawApp-darwin-${{ matrix.arch }}.zip" | cut -d' ' -f1)
          TIMESTAMP=$(date +%s)
          cat > "Pubinfo-UpdJSON-darwin-${{ matrix.arch }}.json" << EOF
          {
              "sha256hash": "${SHA256}",
              "hash": "${SHA1}",
              "timestamp": ${TIMESTAMP}
          }
          EOF

      - name: 为 DMG 生成校验和
        run: |
          cd "${SIGNED_DOTAPP_DIR}"
          shasum -a 256 "Pubinfo-Installer-darwin-${{ matrix.arch }}.dmg" > "Pubinfo-Installer-darwin-${{ matrix.arch }}.dmg.sha256"

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: pubinfo-darwin-${{ matrix.arch }}-release
          path: |
            ${{ env.SIGNED_DMG }}
            ${{ env.SIGNED_DOTAPP_DIR }}/Pubinfo-RawApp-darwin-${{ matrix.arch }}.zip
            ${{ env.SIGNED_DOTAPP_DIR }}/Pubinfo-Installer-darwin-${{ matrix.arch }}.dmg.sha256
            ${{ env.SIGNED_DOTAPP_DIR }}/Pubinfo-UpdJSON-darwin-${{ matrix.arch }}.json

  build-windows-x86:
    needs: build-macos
    runs-on: windows-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 克隆私有仓库
        run: |
          git clone https://x-access-token:${{ secrets.PRIVATE_TOKEN }}@github.com/voideditor-dev/ide.git
          cd ide
          git config core.filemode true
          icacls . /grant Everyone:F /T

      - name: 配置 Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: 安装 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.18.3

      - name: 安装依赖
        run: |
          cd ide
          npm config set fetch-timeout 300000
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm config set fund false
          npm config set audit false
          npm config set loglevel warn
          npm install -g node-gyp@10.1.0 gulp-cli tailwindcss@3.4.17
          npm install
        shell: pwsh

      - name: 构建应用
        run: |
          cd ide
          npm run buildreact
          npm run gulp vscode-win32-x64-min
        shell: pwsh

      - name: 打包应用
        run: |
          cd ide
          mkdir -p .build/win32-x64
          Compress-Archive -Path ../VSCode-win32-x64/* -DestinationPath .build/win32-x64/pubinfo-win32-x64.zip
        shell: pwsh

      - name: 生成校验和
        run: |
          cd ide/.build/win32-x64
          $hash = Get-FileHash -Algorithm SHA256 pubinfo-win32-x64.zip
          $hash.Hash | Out-File -Encoding ascii pubinfo-win32-x64.zip.sha256
        shell: pwsh

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: pubinfo-win32-x64
          path: |
            ide/.build/win32-x64/pubinfo-win32-x64.zip
            ide/.build/win32-x64/pubinfo-win32-x64.zip.sha256

  build-windows-arm64:
    needs: build-macos
    runs-on: windows-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 克隆私有仓库
        run: |
          git clone https://x-access-token:${{ secrets.PRIVATE_TOKEN }}@github.com/voideditor-dev/ide.git
          cd ide
          git config core.filemode true
          icacls . /grant Everyone:F /T

      - name: 配置 Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: 安装 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.18.3

      - name: 安装依赖
        run: |
          cd ide
          npm config set fetch-timeout 300000
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm config set fund false
          npm config set audit false
          npm config set loglevel warn
          npm install -g node-gyp@10.1.0 gulp-cli tailwindcss@3.4.17
          npm install
        shell: pwsh

      - name: 构建应用
        run: |
          cd ide
          npm run buildreact
          npm run gulp vscode-win32-arm64-min
        shell: pwsh

      - name: 打包应用
        run: |
          cd ide
          mkdir -p .build/win32-arm64
          Compress-Archive -Path ../VSCode-win32-arm64/* -DestinationPath .build/win32-arm64/pubinfo-win32-arm64.zip
        shell: pwsh

      - name: 生成校验和
        run: |
          cd ide/.build/win32-arm64
          $hash = Get-FileHash -Algorithm SHA256 pubinfo-win32-arm64.zip
          $hash.Hash | Out-File -Encoding ascii pubinfo-win32-arm64.zip.sha256
        shell: pwsh

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: pubinfo-win32-arm64
          path: |
            ide/.build/win32-arm64/pubinfo-win32-arm64.zip
            ide/.build/win32-arm64/pubinfo-win32-arm64.zip.sha256

  build-linux-x86:
    needs: [build-windows-arm64, build-windows-x86]
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 克隆私有仓库
        run: |
          git clone https://x-access-token:${{ secrets.PRIVATE_TOKEN }}@github.com/voideditor-dev/ide.git
          chmod -R 777 ide

      - name: 安装 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.18.3
          
      - name: 安装依赖
        run: |
          cd ide 
          sudo apt-get update
          sudo apt-get install -y pkg-config libx11-dev libxkbfile-dev libsecret-1-dev libkrb5-dev
          # 增加网络超时以处理慢速连接
          npm config set fetch-timeout 300000
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm install
          npm install -g node-gyp
          npm install -g gulp-cli

      - name: 构建应用
        run: |
          cd ide
          npm run buildreact 
          npm run gulp vscode-linux-x64-min

      - name: 打包应用
        run: |
          cd ide
          mkdir -p .build/linux/client
          ARCHIVE_PATH=".build/linux/client/pubin-linux-x64.tar.gz"
          tar -czf $ARCHIVE_PATH -C .. VSCode-linux-x64

      - name: 生成校验和文件
        run: |
          cd ide
          cd .build/linux/client
          sha256sum pubin-linux-x64.tar.gz > pubin-linux-x64.tar.gz.sha256

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: pubin-linux-x64
          path: |
            ide/.build/linux/client/pubin-linux-x64.tar.gz
            ide/.build/linux/client/pubin-linux-x64.tar.gz.sha256

  build-linux-arm64:
    needs: [build-windows-arm64, build-windows-x86]
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 克隆私有仓库
        run: |
          git clone https://x-access-token:${{ secrets.PRIVATE_TOKEN }}@github.com/voideditor-dev/ide.git
          chmod -R 777 ide

      - name: 安装 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.18.3
          
      - name: 安装依赖
        run: |
          cd ide 
          sudo apt-get update
          sudo apt-get install -y pkg-config libx11-dev libxkbfile-dev libsecret-1-dev libkrb5-dev
          # 增加网络超时以处理慢速连接
          npm config set fetch-timeout 300000
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm install
          npm install -g node-gyp
          npm install -g gulp-cli

      - name: 构建应用
        run: |
          cd ide
          npm run buildreact 
          npm run gulp vscode-linux-arm64-min

      - name: 打包应用
        run: |
          cd ide
          mkdir -p .build/linux/client
          ARCHIVE_PATH=".build/linux/client/pubin-linux-arm64.tar.gz"
          tar -czf $ARCHIVE_PATH -C .. VSCode-linux-arm64

      - name: 生成校验和文件
        run: |
          cd ide
          cd .build/linux/client
          sha256sum pubin-linux-arm64.tar.gz > pubin-linux-arm64.tar.gz.sha256

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: pubin-linux-arm64
          path: |
            ide/.build/linux/client/pubin-linux-arm64.tar.gz
            ide/.build/linux/client/pubin-linux-arm64.tar.gz.sha256
